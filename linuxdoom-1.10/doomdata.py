# DESCRIPTION:
#  all external data is defined here
#  most of the data is loaded into different structures at run time
#  some internal structures shared by many modules are here

# The most basic types we use, portability.
import "doomtype.h"

# Some global defines, that configure the game.
import "doomdef.h"

# Map level types.
# The following data structures define the persistent format
# used in the lumps of the WAD files.

# Lump order in a map WAD: each map needs a couple of lumps
# to provide a complete scene geometry description.
ML_LABEL = 0 # A separator, name, ExMx or MAPxx
ML_THINGS = 1 # Monsters, items..
ML_LINEDEFS = 2 # LineDefs, from editing
ML_SIDEDEFS = 3 # SideDefs, from editing
ML_VERTEXES = 4 # Vertices, edited and BSP splits generated
ML_SEGS = 5 # LineSegs, from LineDefs split by BSP
ML_SSECTORS = 6 # SubSectors, list of LineSegs
ML_NODES = 7 # BSP nodes
ML_SECTORS = 8 # Sectors, from editing
ML_REJECT = 9 # LUT, sector-sector visibility
ML_BLOCKMAP = 10 # LUT, motion clipping, walls/grid element



# A single Vertex.
class mapvertex_t:
	x = float
	y = float

# A SideDef, defining the visual appearance of a wall,
# by setting textures and offsets.
class mapsidedef_t:
	textureoffset = float
	rowoffset = float
	toptexture = str
	bottomtexture = str
	midtexture = str
	# Front sector, towards viewer.
	sector = float

# A LineDef, as used for editing, and as input
# to the BSP builder.
class maplinedef_t:
	v1 = int
	v2 = int
	flags = int
	special = int
	tag = int
	# sidenum[1] will be -1 if one sided
	sidenum = [int]*2

# LineDef attributes.

# Solid, is an obstacle.
ML_BLOCKING = 1

# Blocks monsters only.
ML_BLOCKMONSTERS = 2

# Backside will not be present at all
#  if not two sided.
ML_TWOSIDED = 4

# If a texture is pegged, the texture will have
# the end exposed to air held constant at the
# top or bottom of the texture (stairs or pulled
# down things) and will move with a height change
# of one of the neighbor sectors.
# Unpegged textures allways have the first row of
# the texture at the top pixel of the line for both
# top and bottom textures (use next to windows).

# upper texture unpegged
ML_DONTPEGTOP = 8

# lower texture unpegged
ML_DONTPEGBOTTOM = 16

# In AutoMap: don't map as two sided: IT'S A SECRET!
ML_SECRET = 32

# Sound rendering: don't let sound cross two of these.
ML_SOUNDBLOCK = 64

# Don't draw on the automap at all.
ML_DONTDRAW = 128

# Set if already seen, thus drawn in automap.
ML_MAPPED = 256

# Sector definition, from editing.
class mapsector_t:
	floorheight = int
	ceilingheight = int
	floorpic = str
	ceilingpic = str
	lightlevel = int
	special = int
	tag = int

# SubSector, as generated by BSP.
class mapsubsector_t:
	numsegs = int
	# Index of first one, segs are stored sequentially.
	firstseg = int


# LineSeg, generated by splitting LineDefs
# using partition lines selected by BSP builder.
class mapseg_t:
	v1 = int
	v2 = int
	angle = int
	linedef = int
	side = int
	offse = int

# BSP node structure.

# Indicate a leaf.
NF_SUBSECTOR = 0x8000

class mapnode_t:
	# Partition line from (x,y) to x+dx,y+dy)
	x = int
	y = int
	dx = int
	dy = int

	# Bounding box for each child,
	# clip against view frustum.
	bbox = [[int] * 4] * 2

	# If NF_SUBSECTOR its a subsector,
	# else it's a node of another subtree.
	children = [int]*2

# Thing definition, position, orientation and type,
# plus skill/visibility flags and attributes.
class mapthing_t:
	x = float
	y = float
	angle = float
	type = float
	options = float
